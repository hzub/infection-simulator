{"version":3,"sources":["lib/types.ts","lib/math.ts","lib/utils.ts","lib/simulation.ts","App.tsx","index.tsx"],"names":["InfectionState","getCollisionTangent","d1","d2","dotSize","dist","Math","sqrt","x","y","shuffleArray","array","temporaryValue","randomIndex","currentIndex","length","floor","random","createSimulation","environment","config","onUpdateFn","peakInfected","peakInfectedPercent","numHealthy","numInfected","numCured","stopped","started","infectionHistory","lastTimeHistoryChanged","halfDotSize","canvasElement","document","getElementById","context","getContext","width","canvasWidth","height","canvasHeight","chartHeight","style","Error","dots","newDots","i","a","newX","newY","some","existingDot","push","state","healthy","stationary","speedVec","PI","cos","sin","numberOfDots","stationaryShuffle","stationaryPercentAtStart","infectedShuffle","sort","b","infectedDotsAtStart","infected","generateDots","render","time","clearRect","fillStyle","fillRect","save","dot","cured","beginPath","arc","fill","font","fillText","round","toFixed","medicalCapacityPercent","min","chartBarWidth","heightInfected","heightCured","restore","dotA","infectionTime","timeToCure","undefined","dotVelocity","j","dotB","doCollide","dotAvelocityVector","dotBvelocityVector","relativeVelocity","len","v1","v2","velocityComponentOnTangent","velocityComponentPerpendicularToTangent","dotAspeed","dotBspeed","think","filter","d","unshift","window","requestAnimationFrame","start","stop","onUpdate","f","getState","initialAppConfig","scenarios","Title","Typography","Paragraph","ValueSelector","simulationConfig","setSimulationConfig","field","max","suffix","readonly","gutter","span","value","tipFormatter","e","onChange","produce","c","readOnly","formatter","App","useState","simulation","setSimulation","simulationState","setSimulationState","simulationEnvironment","loadedSimulationConfig","setLoadedSimulationConfig","React","useCallback","newSimulation","updateState","newState","useEffect","interval","setInterval","clearInterval","controls","overlay","QuestionCircleOutlined","justify","align","md","xs","type","onClick","className","danger","fontSize","id","href","ReactDOM"],"mappings":"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","file":"static/js/main.e9064ada.chunk.js","sourcesContent":["export enum InfectionState {\n  \"healthy\",\n  \"infected\",\n  \"cured\"\n}\n\nexport type SimulationState = {\n  numHealthy: number;\n  numInfected: number;\n  numCured: number;\n  peakInfected: number;\n  peakInfectedPercent: number;\n};\n\nexport type Simulation = {\n  start: () => void;\n  stop: () => void;\n  onUpdate: (f: Function) => void;\n  getState: () => SimulationState;\n};\n\nexport interface SimulationEnvironment {\n  dotSize: number;\n  dotVelocity: number;\n  canvasWidth: number;\n  canvasHeight: number;\n  chartHeight: number;\n  chartBarWidth: number;\n}\n\nexport interface SimulationConfig {\n  numberOfDots: number;\n  stationaryPercentAtStart: number;\n  infectedDotsAtStart: number;\n  timeToCure: number;\n  medicalCapacityPercent: number;\n}\n\nexport type Dot = {\n  x: number;\n  y: number;\n  state: InfectionState;\n  stationary?: boolean;\n  speedVec: number[];\n  infectionTime?: number;\n};\n\nexport type Coords = {\n  x: number;\n  y: number;\n};\n","import { Coords } from \"./types\";\n\nexport const dotsIntersect = (d1: Coords, d2: Coords, dotSize: number) =>\n  Math.sqrt((d1.x - d2.x) ** 2 + (d1.y - d2.y) ** 2) <= dotSize + 4;\n\nexport const getCollisionTangent = (\n  d1: Coords,\n  d2: Coords,\n  dotSize: number\n) => {\n  const dist = Math.sqrt((d1.x - d2.x) ** 2 + (d1.y - d2.y) ** 2);\n  if (dist >= dotSize) return null;\n\n  return [(d2.y - d1.y) / dist, -(d2.x - d1.x) / dist];\n};\n\nexport const vecDotProduct = (v1: number[], v2: number[]) => {\n  return v1[0] * v2[0] + v1[1] * v2[1];\n};\n\nexport const createSpeedVecFromAngle = (a: number) => [\n  Math.cos(a),\n  Math.sin(a)\n];\n","export const shuffleArray = <T extends any>(array: T[]): T[] => {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  while (0 !== currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n};\n","import {\n  dotsIntersect,\n  createSpeedVecFromAngle,\n  getCollisionTangent,\n  vecDotProduct\n} from \"./math\";\nimport {\n  InfectionState,\n  Dot,\n  SimulationEnvironment,\n  SimulationConfig\n} from \"./types\";\nimport { shuffleArray } from \"./utils\";\n\nconst generateDots = (\n  environment: SimulationEnvironment,\n  config: SimulationConfig\n) => {\n  const newDots: Dot[] = [];\n  for (let i = 0; i < config.numberOfDots; i++) {\n    let newX = 0;\n    let newY = 0;\n    do {\n      newX =\n        environment.dotSize / 2 +\n        Math.random() * environment.canvasWidth -\n        environment.dotSize;\n      newY =\n        environment.dotSize / 2 +\n        Math.random() * environment.canvasHeight -\n        environment.dotSize;\n    } while (\n      // eslint-disable-next-line no-loop-func\n      newDots.some(existingDot =>\n        dotsIntersect(existingDot, { x: newX, y: newY }, environment.dotSize)\n      )\n    );\n\n    newDots.push({\n      x: newX,\n      y: newY,\n      state: InfectionState.healthy,\n      stationary: false,\n      speedVec: createSpeedVecFromAngle(Math.random() * 2 * Math.PI)\n    });\n  }\n\n  const stationaryShuffle = shuffleArray(newDots);\n  for (\n    let i = 0;\n    i < (config.stationaryPercentAtStart / 100) * stationaryShuffle.length;\n    i++\n  ) {\n    stationaryShuffle[i].stationary = true;\n    stationaryShuffle[i].speedVec = [0, 0];\n  }\n\n  const infectedShuffle = shuffleArray(stationaryShuffle).sort((a, b) =>\n    a.stationary && !b.stationary ? 1 : a.stationary && b.stationary ? 0 : -1\n  );\n  for (let i = 0; i < config.infectedDotsAtStart; i++) {\n    infectedShuffle[i].state = InfectionState.infected;\n  }\n\n  return infectedShuffle;\n};\n\nexport const createSimulation = (\n  environment: SimulationEnvironment,\n  config: SimulationConfig\n) => {\n  let peakInfected = 0;\n  let peakInfectedPercent = 0;\n  let numHealthy = 0;\n  let numInfected = 0;\n  let numCured = 0;\n  let stopped = false;\n  let started = false;\n  let onUpdateFn: Function | undefined;\n  const infectionHistory: [number, number][] = [];\n  let lastTimeHistoryChanged = 0;\n\n  const halfDotSize = environment.dotSize / 2;\n\n  const canvasElement = document.getElementById(\"canvas\") as HTMLCanvasElement;\n  const context = canvasElement.getContext(\"2d\");\n\n  canvasElement.width = environment.canvasWidth;\n  canvasElement.height = environment.canvasHeight + environment.chartHeight;\n\n  canvasElement.style.width = `${environment.canvasWidth / 2}px`;\n  canvasElement.style.height = `${(environment.canvasHeight +\n    environment.chartHeight) /\n    2}px`;\n\n  if (!context) {\n    throw new Error(\"No context!\");\n  }\n\n  let dots: Dot[] = [];\n\n  dots = generateDots(environment, config);\n\n  const think = (time: number) => {\n    for (let i = 0; i < dots.length; i++) {\n      const dotA = dots[i];\n\n      if (dotA.state === InfectionState.infected && !dotA.infectionTime) {\n        dotA.infectionTime = time;\n      }\n\n      if (\n        dotA.infectionTime &&\n        time - dotA.infectionTime > config.timeToCure * 1000\n      ) {\n        dotA.infectionTime = undefined;\n        dotA.state = InfectionState.cured;\n      }\n\n      if (dotA.stationary) {\n        continue;\n      }\n      dotA.x = dotA.x + dotA.speedVec[0] * environment.dotVelocity;\n      dotA.y = dotA.y + dotA.speedVec[1] * environment.dotVelocity;\n\n      if (dots[i].x < halfDotSize) {\n        dots[i].x = halfDotSize;\n        dots[i].speedVec[0] = -dots[i].speedVec[0];\n      }\n\n      if (dots[i].x > environment.canvasWidth - halfDotSize) {\n        dots[i].x = environment.canvasWidth - halfDotSize;\n        dots[i].speedVec[0] = -dots[i].speedVec[0];\n      }\n\n      if (dots[i].y < halfDotSize) {\n        dots[i].y = halfDotSize;\n        dots[i].speedVec[1] = -dots[i].speedVec[1];\n      }\n\n      if (dots[i].y > environment.canvasHeight - halfDotSize) {\n        dots[i].y = environment.canvasHeight - halfDotSize;\n        dots[i].speedVec[1] = -dots[i].speedVec[1];\n      }\n\n      for (let j = 0; j < dots.length; j++) {\n        const dotB = dots[j];\n\n        if (i === j) {\n          continue;\n        }\n\n        const doCollide = getCollisionTangent(\n          dots[i],\n          dots[j],\n          environment.dotSize\n        );\n\n        if (doCollide !== null) {\n          if (\n            dotA.state === InfectionState.infected &&\n            dotB.state === InfectionState.healthy\n          ) {\n            dotB.state = InfectionState.infected;\n          }\n          if (\n            dotB.state === InfectionState.infected &&\n            dotA.state === InfectionState.healthy\n          ) {\n            dotA.state = InfectionState.infected;\n          }\n\n          if (!dotA.stationary) {\n            dotA.x = dotA.x - dotA.speedVec[0] * environment.dotVelocity;\n            dotA.y = dotA.y - dotA.speedVec[1] * environment.dotVelocity;\n          }\n\n          const dotAvelocityVector = dotA.speedVec;\n          const dotBvelocityVector = dotB.speedVec;\n\n          const relativeVelocity = [\n            dotAvelocityVector[0] - dotBvelocityVector[0],\n            dotAvelocityVector[1] - dotBvelocityVector[1]\n          ];\n\n          const len = vecDotProduct(relativeVelocity, doCollide);\n\n          const velocityComponentOnTangent = [\n            doCollide[0] * len,\n            doCollide[1] * len\n          ];\n\n          const velocityComponentPerpendicularToTangent = [\n            relativeVelocity[0] - velocityComponentOnTangent[0],\n            relativeVelocity[1] - velocityComponentOnTangent[1]\n          ];\n\n          if (!dotA.stationary) {\n            dotA.speedVec[0] =\n              dotA.speedVec[0] -\n              (dotB.stationary ? 2 : 1) *\n                velocityComponentPerpendicularToTangent[0];\n            dotA.speedVec[1] =\n              dotA.speedVec[1] -\n              (dotB.stationary ? 2 : 1) *\n                velocityComponentPerpendicularToTangent[1];\n            const dotAspeed = Math.sqrt(\n              dotA.speedVec[0] ** 2 + dotA.speedVec[1] ** 2\n            );\n            dotA.speedVec[0] /= dotAspeed;\n            dotA.speedVec[1] /= dotAspeed;\n          }\n\n          if (!dotB.stationary) {\n            dotB.speedVec[0] =\n              dotB.speedVec[0] +\n              (dotA.stationary ? 2 : 1) *\n                velocityComponentPerpendicularToTangent[0];\n            dotB.speedVec[1] =\n              dotB.speedVec[1] +\n              (dotA.stationary ? 2 : 1) *\n                velocityComponentPerpendicularToTangent[1];\n            const dotBspeed = Math.sqrt(\n              dotB.speedVec[0] ** 2 + dotB.speedVec[1] ** 2\n            );\n\n            dotB.speedVec[0] /= dotBspeed;\n            dotB.speedVec[1] /= dotBspeed;\n          }\n        }\n      }\n    }\n  };\n\n  const render = (time: number) => {\n    context.clearRect(\n      0,\n      0,\n      environment.canvasWidth,\n      environment.canvasHeight + environment.chartHeight\n    );\n\n    context.fillStyle = \"rgba(0,0,0,0.025)\";\n    context.fillRect(\n      0,\n      environment.canvasHeight,\n      environment.canvasWidth,\n      environment.chartHeight\n    );\n\n    if (stopped) {\n      return;\n    }\n\n    context.save();\n    for (let i = 0; i < dots.length; i++) {\n      const dot = dots[i];\n      context.fillStyle =\n        dot.state === InfectionState.infected\n          ? \"orangered\"\n          : dot.state === InfectionState.cured\n          ? \"limegreen\"\n          : \"#bbb\";\n\n      context.beginPath();\n\n      context.arc(dot.x, dot.y, halfDotSize + 1, 0, 2 * Math.PI);\n\n      context.fill();\n    }\n\n    context.font = \"20px Source Sans Pro\";\n\n    context.fillStyle = \"rgba(0,0,0,0.2)\";\n    context.fillRect(0, environment.canvasHeight, environment.canvasWidth, 1);\n\n    context.fillStyle = \"rgba(0,0,0,0.15)\";\n    context.fillRect(\n      0,\n      environment.canvasHeight + environment.chartHeight / 2,\n      environment.canvasWidth,\n      1\n    );\n    context.fillText(\n      Math.round(dots.length / 2).toFixed(0),\n      8,\n      environment.canvasHeight + environment.chartHeight / 2 - 8\n    );\n    context.fillRect(\n      0,\n      environment.canvasHeight + environment.chartHeight / 4,\n      environment.canvasWidth,\n      1\n    );\n    context.fillText(\n      Math.round(dots.length * 0.75).toFixed(0),\n      8,\n      environment.canvasHeight + environment.chartHeight / 4 - 8\n    );\n\n    context.fillRect(\n      0,\n      environment.canvasHeight + environment.chartHeight * 0.75,\n      environment.canvasWidth,\n      1\n    );\n    context.fillText(\n      Math.round(dots.length * 0.25).toFixed(0),\n      8,\n      environment.canvasHeight + environment.chartHeight * 0.75 - 8\n    );\n\n    context.fillStyle = \"rgba(0,0,0,0.4)\";\n\n    context.fillRect(\n      0,\n      environment.canvasHeight +\n        ((100 - config.medicalCapacityPercent) / 100) * environment.chartHeight,\n      environment.canvasWidth,\n      1\n    );\n\n    context.fillText(\n      \"Supposed medical capacity\",\n      64,\n      environment.canvasHeight +\n        ((100 - config.medicalCapacityPercent) / 100) *\n          environment.chartHeight -\n        8\n    );\n\n    for (\n      let i = 0;\n      i <\n      Math.min(\n        infectionHistory.length,\n        environment.canvasWidth / environment.chartBarWidth\n      );\n      i++\n    ) {\n      const x = environment.canvasWidth - (i + 1) * environment.chartBarWidth;\n      const heightInfected =\n        (infectionHistory[i][0] / dots.length) * environment.chartHeight;\n      const heightCured =\n        (infectionHistory[i][1] / dots.length) * environment.chartHeight;\n      context.fillStyle = \"rgba(255,0,0,0.3)\";\n      context.fillRect(\n        x,\n        environment.canvasHeight + environment.chartHeight - heightInfected,\n        environment.chartBarWidth,\n        heightInfected\n      );\n\n      context.fillStyle = \"rgba(100,255,100,0.3)\";\n      context.fillRect(\n        x,\n        environment.canvasHeight + environment.chartHeight - heightCured,\n        environment.chartBarWidth,\n        heightCured\n      );\n    }\n\n    context.restore();\n\n    think(time);\n\n    numHealthy = dots.filter(d => d.state === InfectionState.healthy).length;\n    numInfected = dots.filter(d => d.state === InfectionState.infected).length;\n    numCured = dots.filter(d => d.state === InfectionState.cured).length;\n\n    if (time - lastTimeHistoryChanged > 50) {\n      lastTimeHistoryChanged = time;\n      infectionHistory.unshift([numInfected, numCured]);\n    }\n\n    if (numInfected > peakInfected) {\n      peakInfected = numInfected;\n    }\n\n    peakInfectedPercent = (100 * peakInfected) / dots.length;\n\n    onUpdateFn && onUpdateFn();\n    window.requestAnimationFrame(render);\n  };\n\n  return {\n    start: () => {\n      if (started) return;\n      started = true;\n      window.requestAnimationFrame(render);\n    },\n    stop: () => {\n      stopped = true;\n    },\n    onUpdate: (f: Function) => {\n      onUpdateFn = f;\n    },\n    getState: () => ({\n      numHealthy,\n      numInfected,\n      numCured,\n      peakInfected,\n      peakInfectedPercent\n    })\n  };\n};\n","import React, { useState, useEffect } from \"react\";\nimport { createSimulation } from \"./lib/simulation\";\nimport {\n  SimulationConfig,\n  SimulationEnvironment,\n  SimulationState,\n  Simulation\n} from \"./lib/types\";\nimport produce from \"immer\";\nimport {\n  InputNumber,\n  Row,\n  Col,\n  Slider,\n  Button,\n  Divider,\n  Tooltip,\n  Typography\n} from \"antd\";\nimport { QuestionCircleOutlined } from \"@ant-design/icons\";\n\nconst initialAppConfig: SimulationConfig = {\n  stationaryPercentAtStart: 95,\n  infectedDotsAtStart: 3,\n  timeToCure: 14,\n  numberOfDots: 200,\n  medicalCapacityPercent: 25\n};\n\nconst scenarios: SimulationConfig[] = [\n  {\n    stationaryPercentAtStart: 95,\n    infectedDotsAtStart: 3,\n    timeToCure: 14,\n    numberOfDots: 200,\n    medicalCapacityPercent: 25\n  },\n  {\n    stationaryPercentAtStart: 5,\n    infectedDotsAtStart: 3,\n    timeToCure: 14,\n    numberOfDots: 200,\n    medicalCapacityPercent: 25\n  }\n];\n\nconst { Title, Paragraph } = Typography;\n\nconst ValueSelector = ({\n  simulationConfig,\n  setSimulationConfig,\n  field,\n  max,\n  min,\n  suffix,\n  readonly\n}: {\n  max: number;\n  min: number;\n  simulationConfig: SimulationConfig;\n  setSimulationConfig: (s: SimulationConfig) => void;\n  field: keyof SimulationConfig;\n  suffix?: string;\n  readonly?: boolean;\n}) => {\n  return (\n    <Row gutter={16}>\n      <Col span={16}>\n        <Slider\n          value={simulationConfig[field]}\n          min={min}\n          max={max}\n          tipFormatter={e => `${e}${suffix || \"\"}`}\n          style={{ width: \"100%\" }}\n          onChange={e => {\n            setSimulationConfig(\n              produce(simulationConfig, c => {\n                c[field] = (e as number) || 1;\n              })\n            );\n          }}\n        />\n      </Col>\n      <Col span={8}>\n        <InputNumber\n          value={simulationConfig[field]}\n          min={min}\n          max={max}\n          readOnly={readonly}\n          style={{ width: \"100%\" }}\n          formatter={e => `${e}${suffix || \"\"}`}\n          onChange={e => {\n            setSimulationConfig(\n              produce(simulationConfig, c => {\n                c[field] = e || 1;\n              })\n            );\n          }}\n        />\n      </Col>\n    </Row>\n  );\n};\n\nfunction App() {\n  const [simulation, setSimulation] = useState<Simulation>();\n  const [simulationState, setSimulationState] = useState<SimulationState>();\n\n  const [simulationEnvironment] = useState<SimulationEnvironment>({\n    dotSize: 8,\n    dotVelocity: 1.4,\n    canvasWidth: 1200,\n    canvasHeight: 800,\n    chartHeight: 300,\n    chartBarWidth: 0.5\n  });\n\n  const [loadedSimulationConfig, setLoadedSimulationConfig] = useState<\n    SimulationConfig\n  >();\n\n  const [simulationConfig, setSimulationConfig] = useState<SimulationConfig>(\n    initialAppConfig\n  );\n\n  const start = React.useCallback(\n    (config?: SimulationConfig) => {\n      if (simulation) {\n        simulation.stop();\n      }\n      const newSimulation = createSimulation(\n        { ...simulationEnvironment },\n        { ...(config || simulationConfig) }\n      );\n      if (config) {\n        setSimulationConfig(config);\n      }\n      setLoadedSimulationConfig(config || simulationConfig);\n      setSimulation(newSimulation);\n\n      newSimulation.start();\n    },\n    [simulation, simulationConfig, simulationEnvironment]\n  );\n\n  const updateState = React.useCallback(() => {\n    if (simulation) {\n      const newState = simulation.getState();\n      setSimulationState(newState);\n    }\n  }, [simulation]);\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      updateState();\n    }, 1000);\n\n    return () => clearInterval(interval);\n  }, [updateState]);\n\n  useEffect(() => {\n    start();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const controls = (\n    <>\n      <div>\n        <div>\n          Population count{\" \"}\n          <Tooltip overlay=\"Set how many people will live in your population.\">\n            <QuestionCircleOutlined />\n          </Tooltip>\n        </div>\n        <ValueSelector\n          min={10}\n          max={500}\n          field=\"numberOfDots\"\n          simulationConfig={simulationConfig}\n          setSimulationConfig={setSimulationConfig}\n        />\n      </div>\n      <Divider />\n      <div>\n        <div>\n          Percent of stationary (self-isolating) people{\" \"}\n          <Tooltip\n            overlay={`This percentage of people will not move in your population. They can be \"visited\" by other persons, but will remain stationary.`}\n          >\n            <QuestionCircleOutlined />\n          </Tooltip>\n        </div>\n        <ValueSelector\n          min={0}\n          max={100}\n          field=\"stationaryPercentAtStart\"\n          simulationConfig={simulationConfig}\n          setSimulationConfig={setSimulationConfig}\n          suffix=\"%\"\n        />\n      </div>\n      <Divider />\n\n      <div>\n        <div>\n          Time to get cured (in seconds){\" \"}\n          <Tooltip\n            overlay={`Starting from the moment of infection, every person will become \"cured\" after this amount of time - which means that he will not transmit the infection and cannot be infected anymore.`}\n          >\n            <QuestionCircleOutlined />\n          </Tooltip>\n        </div>\n        <ValueSelector\n          min={1}\n          max={30}\n          field=\"timeToCure\"\n          simulationConfig={simulationConfig}\n          setSimulationConfig={setSimulationConfig}\n          suffix=\" s\"\n        />\n      </div>\n      <Divider />\n\n      <div>\n        <div>\n          Initially infected population{\" \"}\n          <Tooltip\n            overlay={`This number of people will have be infected from the beginning.`}\n          >\n            <QuestionCircleOutlined />\n          </Tooltip>\n        </div>\n        <ValueSelector\n          min={1}\n          max={simulationConfig.numberOfDots}\n          field=\"infectedDotsAtStart\"\n          simulationConfig={simulationConfig}\n          setSimulationConfig={setSimulationConfig}\n          readonly\n          suffix={` / ${simulationConfig.numberOfDots}`}\n        />\n      </div>\n    </>\n  );\n\n  return (\n    <div>\n      <Row justify=\"center\" align=\"middle\">\n        <Col md={20} xs={24}>\n          <Row justify=\"center\">\n            <Col md={16} xs={22}>\n              <Row justify=\"center\">\n                <Title>Infection & social distancing simulator</Title>\n                <Paragraph type=\"secondary\">\n                  COVID-19 pandemic is no joke. Every day, people are dying in\n                  many countries across the world.{\" \"}\n                  <strong>\n                    One of the most commonly applied countermeasures in almost\n                    every place is some form of social distancing, which results\n                    in reduced human interactions and decrease of virus spread.{\" \"}\n                  </strong>\n                  Social distancing takes many forms: voluntary staying at home\n                  or forced curfews. Still, it turns out to be the best form of\n                  infection prevention.\n                </Paragraph>\n                <Paragraph>\n                  The application below allows you to simulate a virtual\n                  society, where certain portion of inhbitants is stationary\n                  (isolated), while the rest is moving. Each dot is a \"person\"\n                  that might be infected or not. An infected person will\n                  transmit the disease upon \"bumping\" into other healthy person.\n                  People are getting better with time, which means they can't be\n                  infected anymore after some time.\n                </Paragraph>\n                <Paragraph>\n                  Play with it a little and see for yourself,{\" \"}\n                  <strong>how important is staying in place</strong> - and how\n                  it affects the virus spread.\n                </Paragraph>\n                <Row gutter={[16, 8]}>\n                  <Col>\n                    <Button onClick={() => start(scenarios[0])}>\n                      <span>\n                        Run scenario with{\" \"}\n                        <span className=\"intent-success\">high</span> social\n                        distancing\n                      </span>\n                    </Button>\n                  </Col>\n                  <Col>\n                    <Button onClick={() => start(scenarios[1])}>\n                      <span>\n                        Run scenario with{\" \"}\n                        <span className=\"intent-danger\">low</span> social\n                        distancing\n                      </span>\n                    </Button>\n                  </Col>\n                </Row>\n                <Divider />\n              </Row>\n            </Col>\n          </Row>\n          <Row\n            justify=\"center\"\n            gutter={24}\n            align=\"middle\"\n            style={{ height: 60 }}\n          >\n            {simulationState && (\n              <>\n                <Col className=\"indicator i-healthy\">\n                  Healthy: {simulationState.numHealthy}\n                </Col>\n                <Col className=\"indicator i-infected\">\n                  Infected: {simulationState.numInfected}\n                </Col>\n                <Col className=\"indicator i-cured\">\n                  Cured: {simulationState?.numCured}\n                </Col>\n              </>\n            )}\n          </Row>\n          <Row\n            justify=\"center\"\n            gutter={16}\n            align=\"middle\"\n            style={{ height: 60 }}\n          >\n            {simulationState && (\n              <>\n                <Col className=\"small-indicator i-peak-infected\">\n                  Peak infected: {simulationState.peakInfected} (\n                  {simulationState?.peakInfectedPercent.toFixed(2)} %)\n                </Col>\n              </>\n            )}\n          </Row>\n        </Col>\n      </Row>\n      <Row justify=\"center\">\n        <Col xs={22} md={20}>\n          <Row gutter={16}>\n            <Col className=\"wrap-controls\">\n              {controls}\n              {/* Hidden in favor of top scenarios */}\n              {/* <Divider type=\"horizontal\" orientation=\"left\">\n                Predefined scenarios\n              </Divider>\n              <Row gutter={[8, 24]}>\n                <Col xs={24} md={12}>\n                  <Paragraph>\n                    Moderate population,{\" \"}\n                    <Text className=\"intent-success\">many isolated people</Text>\n                    , low initial infection.{\" \"}\n                  </Paragraph>\n                  <Paragraph>\n                    <strong>\n                      Result: <Text className=\"intent-success\">low strain</Text>{\" \"}\n                      on medical capacity.\n                    </strong>\n                  </Paragraph>\n                  <Button type=\"primary\" onClick={() => start(scenarios[0])}>\n                    Run scenario\n                  </Button>\n                </Col>\n                <Col xs={24} md={12}>\n                  <Paragraph>\n                    Moderate population,{\" \"}\n                    <Text className=\"intent-danger\">\n                      low number of isolated people\n                    </Text>\n                    , low initial infection.{\" \"}\n                  </Paragraph>\n                  <Paragraph>\n                    <strong>\n                      Result: <Text className=\"intent-danger\">high strain</Text>{\" \"}\n                      on medical capacity.\n                    </strong>\n                  </Paragraph>\n                  <Button type=\"primary\" onClick={() => start(scenarios[1])}>\n                    Run scenario\n                  </Button>\n                </Col>\n              </Row> */}\n            </Col>\n            <Col className=\"wrap-canvas\">\n              <Row justify=\"center\">\n                <Button\n                  type=\"primary\"\n                  danger={loadedSimulationConfig !== simulationConfig}\n                  onClick={() => start()}\n                >\n                  {!simulation\n                    ? \"Start simulation\"\n                    : loadedSimulationConfig === simulationConfig\n                    ? \"Restart simulation using current settings\"\n                    : \"Apply new settings and restart simulation\"}\n                </Button>\n              </Row>\n              <Row justify=\"center\" className=\"canvas-holder\">\n                <div className=\"canvas-line-tooltip\">\n                  <Tooltip overlay=\"This line marks hypothetical limit of the hospitals’ ability to cure people\">\n                    <QuestionCircleOutlined style={{ fontSize: \"12px\" }} />\n                  </Tooltip>\n                </div>\n                <canvas\n                  id=\"canvas\"\n                  style={{\n                    width: simulationEnvironment.canvasWidth / 2,\n                    height:\n                      (simulationEnvironment.canvasHeight +\n                        simulationEnvironment.chartHeight) /\n                      2\n                  }}\n                />\n              </Row>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n      <br />\n      <br />\n      <Row justify=\"center\" align=\"middle\">\n        <Col span={20}>\n          <Row justify=\"center\">\n            <Divider />\n            <Col span={16}>\n              <Row justify=\"center\">\n                <Paragraph>\n                  &copy;2020 Hubert Zub. Licensed under MIT License.{\" \"}\n                  <a href=\"https://github.com/hzub/infection-simulator/\">\n                    Repository\n                  </a>\n                </Paragraph>\n              </Row>\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </div>\n  );\n}\n\nexport default App;\n","import * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"antd/dist/antd.css\";\nimport \"./styles.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}